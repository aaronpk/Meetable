############### SITE CUSTOMIZATION ###############

# The APP_NAME is shown in the UI and web page title
APP_NAME=Meetable

# Provide the base URL (no trailing slash) to where you've deployed the app
APP_URL=https://events.example.org
# APP_URL=http://localhost:8080


############### SERVER SETTINGS ###############

# Set to "true" and "local" for development
# APP_DEBUG=true
# APP_ENV=local

# set via php artisan key:generate
APP_KEY=

# Set up the database configuration here
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

# Redis is a good solution for these, but you should be able to use any option provided by Laravel too.
# The database option is probably the easiest to get started

# https://laravel.com/docs/6.x/cache
# CACHE_DRIVER=database
# CACHE_DRIVER=file
# CACHE_DRIVER=redis

# https://laravel.com/docs/6.x/queues
# QUEUE_CONNECTION=database
# QUEUE_CONNECTION=sync
# QUEUE_CONNECTION=redis

# https://laravel.com/docs/6.x/session
# SESSION_DRIVER=cookie
# SESSION_DRIVER=database
# SESSION_DRIVER=redis

# SESSION_LIFETIME=86400

# Optionally configure redis for caching, queuing and sessions
# REDIS_HOST=127.0.0.1
# REDIS_PASSWORD=null
# REDIS_PORT=6379

# You can choose to store images on the local disk or an external provider such as S3
FILESYSTEM_DRIVER=local

# If you want to store images on S3 instead of the filesystem, configure the below
# FILESYSTEM_DRIVER=s3
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=
AWS_BUCKET=
AWS_URL=

# For Heroku, use LOG_CHANNEL=stderr
# LOG_CHANNEL=stack
# LOG_CHANNEL=stderr


################ AUTHENTICATION ################
# Choose how you want to handle user authentication

AUTH_METHOD=session

# Discord
# AUTH_METHOD=discord
# DISCORD_CLIENT_ID=
# DISCORD_CLIENT_SECRET=
# If you set DISCORD_SERVER_ID, the user will only be able to log in if they are a member of this server
# DISCORD_SERVER_ID=
# If you set DISCORD_ROLE_ID, the user will only be able to log in if they have this role in the server
# DISCORD_ROLE_ID=

# GitHub
# AUTH_METHOD=github
# https://github.com/settings/developers
# GITHUB_CLIENT_ID=
# GITHUB_CLIENT_SECRET=
# Optionally, define a space-separated list of users who are allowed to log in.
# If this list is not defined, then anyone with a GitHub account will be able to log in.
# GITHUB_ALLOWED_USERS=
# Define one or more GitHub usernames (space-separated) which will be considered admin accounts
# as soon as they log in. Make sure you set your own account here!
# GITHUB_ADMIN_USERS=
# Make sure to register a callback URL on github such as:
# https://events.example.org/auth/github

# Vouch Proxy (HTTP Remote-User header)
# See https://github.com/aaronpk/Meetable#vouch-proxy for details
# AUTH_METHOD=vouch
# VOUCH_HOSTNAME=sso.example.org

# Heroku
# See README.md for more details on Heroku support
# AUTH_METHOD=heroku
# HEROKU_CLIENT_ID=
# HEROKU_CLIENT_SECRET=

# OIDC
# AUTH_METHOD=oidc
# OIDC_AUTHORIZATION_ENDPOINT=https://authorization-server.com/authorize
# OIDC_TOKEN_ENDPOINT=https://authorization-server.com/token
# OIDC_CLIENT_ID=
# OIDC_CLIENT_SECRET=
# OIDC_ADMIN_USERS=
# OIDC_ALLOWED_USERS=
# Make sure to register a callback URL at your OIDC provider such as:
# https://events.example.org/auth/oidc
# If your OIDC provider supports IdP-Initiated login, set that URL to:
# https://events.example.org/auth/oidc/initiate

# Who should be able to manage events?
# Set to "users" so any logged-in user can create events
# Set to "admins" so that only admin users can create events
# Currently this permission applies to all actions on an event, including
# creating, editing, deleting events, and creating and deleting responses
ALLOW_MANAGE_EVENTS=users

# Who should be able to edit system messages?
# This includes things like the configurable text on the "add an event" page
# Set to "users" or "admins"
ALLOW_MANAGE_SITE=admins

